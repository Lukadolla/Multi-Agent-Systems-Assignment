agent Vac extends VacOntology{
    rule +!main(list args) {

        //Initializing and joining bots to vacuum world

        ei.launch("vacuumworld","dependency/vacuumworld-1.2.0.jar");
        ei.join();

        int i = 0;
        string startLocation;

        ei.link(at_index(args, 0, string));
        startLocation = at_index(args, 1, string);
        S.sleep(2000);
        ei.move("west", 0); // Initializing action
        S.sleep(1000);

        //Setting initial destinations of each bot

        if(startLocation == "upperLeft"){
            !movement(0,1);
        }
        if(startLocation == "upperRight"){
            !movement(15,3);
        }
        if(startLocation == "lowerLeft"){
            !movement(0,5);
        }
        if(startLocation == "lowerRight"){
            !movement(15,7);
        }
    }

    //Moving the bots to their target x coordinates
    rule +!movement(int x, int y) : ei.location(int botx, int boty) & x == botx & y == boty {
        if(x > 10){
            x = 0;
        }else{
            x = 15;
        }
        !movement(x, y);
    }

    //Movement rule if the bot has not reached its y coordinate and is "below" the y line it is meant to be on
    rule +!movement(int x, int y) : ei.location(int botx, int boty) & y > boty {
        if(x == botx){
            ei.move("south", 0);
            S.sleep(1000);
            query(ei.square("forward", string f));
            //If the bot's destination is an obstacle it will make change the x coordinate of its target
            if(f == "obstacle"){
                if(x > 10){
                    x = M.intValue("" + x) - 1;
                } else{
                    x = M.intValue("" + x) + 1;
                }
            }
        }
        !moveForward("south");
        !movement(x, y);
    }

    //Movement rule if the bot has not reached its y coordinate and is "above" the y line it is meant to be on
    rule +!movement(int x, int y) : ei.location(int botx, int boty) & y < boty {
        if(x == botx){
            ei.move("north", 0);
            S.sleep(500);
            query(ei.square("forward", string f));
            //If the bot's destination is an obstacle it will make change the x coordinate of its target
            if(f == "obstacle"){
                if(x > 10){
                    x = M.intValue("" + x) - 1;
                } else{
                    x = M.intValue("" + x) + 1;
                }
            }
        }
        !moveForward("north");
        !movement(x, y);
    }

    //Movement rule for if the bot has already reached its y line but must now reach its x coordinate and it is too far left of the target
    rule +!movement(int x, int y) : ei.location(int botx, int boty) & x > botx & y == boty {
        !moveForward("east");
        !movement(x, y);
    }

    //Movement rule for if the bot has already reached its y line but must now reach its x coordinate and it is too far right of the target
    rule +!movement(int x, int y) : ei.location(int botx, int boty) & x < botx & y == boty {
        !moveForward("west");
        !movement(x, y);
    }

    //Generic movement rule
    rule +!movement(int x, int y) {
        !movement(x, y);
    }

    //Rotating bot to appropriate direction that it is meant to head in
    rule +!moveForward(string direction) : ei.square("here", string h){
        S.sleep(1000);
        ei.move(direction, 0);
        if(h == "dust"){
            ei.clean();
        }
        !goForward(direction);
    }

   //Core driving rule which allows for looking for and cleaning up dust and avoiding obstacles
    rule +!goForward(string direction) {
        !seekDust();
        S.sleep(500);
        query(ei.square("forward", string f));
        if(f == "empty" | f == "dust"){
            ei.move("forward", 1);

            if(f == "dust"){
                ei.clean();
            }
        } else{
            !obstacleAvoid(direction);
        }
    }

    //Rule for searching and cleaning encountered dust
    rule +!seekDust() : ei.square("left", string l) & ei.square("right", string r) & ei.square("forward", string f)
    & ei.square("forwardRight", string fr) & ei.square("forwardLeft", string fl) & ei.square("here", string h){
        if(l == "dust"){
            ei.move("left", 1);
            ei.clean();
            ei.move("back", 1);
            ei.move("left", 0);
        }

        if(r == "dust"){
            ei.move("right", 1);
            ei.clean();
            ei.move("back", 1);
            ei.move("right", 0);
        }
        //if statement checking if forward is obstacle
        if(fl == "dust" & (f == "empty" | f == "dust")){
            ei.move("forward", 1);
            if(h == "dust"){
                S.sleep(500);
                ei.clean();
            }
            ei.move("left", 1);
            ei.clean();
            ei.move("back", 1);
            ei.move("right", 1);
            ei.move("back", 0);
        } else if((l == "empty" |  l == "dust") & fl == "dust"){
            ei.move("left", 1);
            if(h == "dust"){
               S.sleep(500);
               ei.clean();
            }
            ei.move("right", 1);
            ei.clean();
            ei.move("back", 1);
            ei.move("left", 1);
            ei.move("left", 0);
        }

        if(fr == "dust" & (f == "empty" | f == "dust")){
             ei.move("forward", 1);
             if(h == "dust"){
                S.sleep(500);
                ei.clean();
             }
             ei.move("right", 1);
             ei.clean();
             ei.move("back", 1);
             ei.move("right", 0);
        } else if((r == "empty" | r == "dust") & fr == "dust"){
             ei.move("right", 1);
            if(h == "dust"){
               S.sleep(500);
               ei.clean();
            }
             ei.move("left", 1);
             ei.clean();
             ei.move("back", 1);
             ei.move("right", 1);
             ei.move("right", 0);
        }

        if(f == "dust"){
            ei.move("forward", 1);
            ei.clean();
        }
    }

    //Rule to ensure that the original seekDust runs
    rule +!seekDust(){
        !seekDust();
    }

    //Rule for dealing with encountered obstacles
    rule +!obstacleAvoid(string direction) : ei.square("left", string l) & ei.square("right", string r)
    & ei.square("forwardRight", string fr) & ei.square("forwardLeft", string fl) & ei.square("here", string h){
        if(direction == "east" | direction == "south"){
            if(fl == "dust" | fl == "empty"){
                if(l == "dust" | l == "empty"){
                    ei.move("left", 1);
                    if(h == "dust"){
                       S.sleep(500);
                       ei.clean();
                    }
                    ei.move("right", 1);
                }
            } else if(fr == "dust" | fr == "empty"){
                if(r == "dust" | r == "empty"){
                    ei.move("right", 1);
                    if(h == "dust"){
                       S.sleep(500);
                       ei.clean();
                    }
                    ei.move("left", 1);
                }
            } else if(l == "dust" | l == "empty"){
                ei.move("left", 1);
                if(h == "dust"){
                   S.sleep(500);
                   ei.clean();
                }
                ei.move("left", 1);
                ei.move("right", 1);
            } else {
                ei.move("right", 1);
                if(h == "dust"){
                   S.sleep(500);
                   ei.clean();
                }
                ei.move("right", 1);
                ei.move("left", 1);
            }
            //Still might get stuck
        } else{
            if(fr == "dust" | fr == "empty"){
                if(r == "dust" | r == "empty"){
                    ei.move("right", 1);
                    if(h == "dust"){
                       S.sleep(500);
                       ei.clean();
                    }
                    ei.move("left", 1);
                }
            } else if(fl == "dust" | fl == "empty"){
               if(l == "dust" | l == "empty"){
                  ei.move("left", 1);
                  if(h == "dust"){
                     S.sleep(500);
                     ei.clean();
                  }
                  ei.move("right", 1);
              }
           }else if(r == "dust" | r == "empty"){
                ei.move("right", 1);
                if(h == "dust"){
                   S.sleep(500);
                   ei.clean();
                }
                ei.move("right", 1);
                ei.move("left", 1);
           } else {
                ei.move("left", 1);
                if(h == "dust"){
                   S.sleep(500);
                   ei.clean();
                }
                ei.move("left", 1);
                ei.move("right", 1);
           }
        }

    }

    //Rule to ensure obstacleAvoid rule runs
    rule +!obstacleAvoid(string direction){
        C.println("Can't work out concept");
        !obstacleAvoid(direction);
    }

}