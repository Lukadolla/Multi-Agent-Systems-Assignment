agent Vac extends VacOntology{
    rule +!main(list args) {
        ei.launch("vacuumworld","dependency/vacuumworld-1.2.0.jar");
        ei.join();

        int i = 0;
        string startLocation;

        forall(string I : args) {
            if(i == 0){
                ei.link(I);
            }
            if(i == 1){
                startLocation = I;
            }
            i++;
        }

        ei.move("west", 0);

        S.sleep(2000);

        if(startLocation == "topLeft"){
            !movement(1,1);
        }
        if(startLocation == "topRight"){
            !movement(14,1);
        }
        if(startLocation == "botLeft"){
            !movement(1,6);
        }
        if(startLocation == "botRight"){
            !movement(14,6);
        }
    }

    rule +!movement(int x, int y) : locationInfo(int botx, int boty) & x == botx & y == boty {
        if(x % 2 == 0){
            x = x - 5;
        }else{
            x = x + 5;
        }
        if(y % 2 == 0){
            y = y - 1;
        }else{
            y = y + 1;
        }
        !movement((x), (y));
    }

    rule +!movement(int x, int y) : locationInfo(int botx, int boty) & x > botx {
        !moveForward("east");
        !movement(x, y);
    }

    rule +!movement(int x, int y) : locationInfo(int botx, int boty) & x < botx {
        !moveForward("west");
        !movement(x, y);
    }

    rule +!movement(int x, int y) : locationInfo(int botx, int boty) & y > boty & x == botx {
        !moveForward("south");
        !movement(x, y);
    }

    rule +!movement(int x, int y) : locationInfo(int botx, int boty) & y < boty & x == botx {
        !moveForward("north");
        !movement(x, y);
    }

    rule +!movement(int x, int y) {
        C.println("Predicates are bunched");
        ei.move("west", 0);
        S.sleep(2000);
        !movement(x, y);
    }

    rule +!moveForward(string direction){
        S.sleep(500);
        ei.move(direction, 0);
        !cleanTile();
        !goForward(direction);
    }

    rule +!goForward(string direction) {
        !seekDust();
        foreach(squareInfo("forward", string z)){
            if(z == "empty" | z == "dust"){
                ei.move("forward", 1);
            } else{
                !obstacleAvoid(direction);
            }
        }
    }

    rule +!seekDust(){
        string check = "true";
        while(check == "true"){
            S.sleep(500);
            check = "false";
            foreach(squareInfo("left", string z)){
                if(z == "dust"){
                    ei.move("left", 1);
                    ei.clean();
                    check="true";
                }
            }

            foreach(squareInfo("right", string z)){
                if(z == "dust"){
                     ei.move("right", 1);
                     ei.clean();
                     check="true";
                }
            }

            foreach(squareInfo("forward", string z)){
               if(z == "dust"){
                    ei.move("forward", 1);
                    ei.clean();
                    check="true";
               }
            }
        }
    }

    rule +!obstacleAvoid(string direction) : squareInfo("left", string a) & squareInfo("right", string b){
        if(direction == "east"){
            if(b == "dust" | b == "empty"){
                        ei.move("right", 1);
                } else if(a == "dust" | a == "empty"){
                   ei.move("left", 1);
                } else {
                   ei.move("back", 1);
                   ei.move("right", 1);
            }
        } else{
            if(a == "dust" | a == "empty"){
                ei.move("left", 1);
            } else if(b == "dust" | b == "empty"){
                ei.move("right", 1);
            } else {
                ei.move("back", 1);
                ei.move("left", 1);
            }
        }

    }

    rule +!obstacleAvoid(string direction){
        C.println("Can't work out concept");
        !obstacleAvoid(direction);
    }

    rule +!cleanTile(){
        foreach(squareInfo("here", string t)){
            if(t == "dust"){
                ei.clean();
            }
        }

    }

    rule +$ei.event(square("here", string y)) : squareInfo("here", string z){
        -squareInfo("here", z);
        +squareInfo("here", y);
    }

    rule +$ei.event(square("here", string y)) {
        +squareInfo("here", y);
    }

    rule +$ei.event(square("forward", string y)) : squareInfo("forward", string z){
         -squareInfo("forward", z);
         +squareInfo("forward", y);
    }

    rule +$ei.event(square("forward", string y)) {
         +squareInfo("forward", y);
    }

    rule +$ei.event(square("left", string y)) : squareInfo("left", string z) {
        -squareInfo("left", z);
        +squareInfo("left", y);
    }

    rule +$ei.event(square("left", string y))  {
        +squareInfo("left", y);
    }

    rule +$ei.event(square("right", string y)) : squareInfo("right", string z) {
        -squareInfo("right", z);
        +squareInfo("right", y);
    }

    rule +$ei.event(square("right", string y)){
        +squareInfo("right", y);
    }

    rule +$ei.event(square("forwardLeft", string y)) : squareInfo("forwardLeft", string z) {
        -squareInfo("forwardLeft", z);
        +squareInfo("forwardLeft", y);
    }

    rule +$ei.event(square("forwardLeft", string y)) {
        +squareInfo("forwardLeft", y);
    }

    rule +$ei.event(square("forwardRight", string y)) : squareInfo("forwardRight", string z){
        -squareInfo("forwardRight", z);
        +squareInfo("forwardRight", y);
    }

    rule +$ei.event(square("forwardRight", string y)) {
        +squareInfo("forwardRight", y);
    }

    rule +$ei.event(location(int X, int Y)) : locationInfo(int z, int w) {
        -locationInfo(z, w);
        +locationInfo(X, Y);
        //debug.dumpBeliefs();
    }

    rule +$ei.event(location(int X, int Y)) {
        +locationInfo(X, Y);
        //debug.dumpBeliefs();
    }
}