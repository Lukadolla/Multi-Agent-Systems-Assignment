agent Vac extends VacOntology{
    rule +!main(list args) {
        ei.launch("vacuumworld","dependency/vacuumworld-1.2.0.jar");
        ei.join();

        int i = 0;
        string startLocation;

        forall(string I : args) {
            if(i == 0){
                ei.link(I);
            }
            if(i == 1){
                startLocation = I;
            }
            i++;
        }

        ei.move("west", 0);

        S.sleep(2000);

        if(startLocation == "topLeft"){
            !movement(0,1);
        }
        if(startLocation == "topRight"){
            !movement(15,3);
        }
        if(startLocation == "botLeft"){
            !movement(0,5);
        }
        if(startLocation == "botRight"){
            !movement(15,7);
        }
    }

    rule +!movement(int x, int y) : locationInfo(int botx, int boty) & x == botx & y == boty {
        if(x == 15){
            x = 0;
        }else{
            x = 15;
        }
        !movement(x, y);
    }

    rule +!movement(int x, int y) : locationInfo(int botx, int boty) & x > botx {
        !moveForward("east");
        !movement(x, y);
    }

    rule +!movement(int x, int y) : locationInfo(int botx, int boty) & x < botx {
        !moveForward("west");
        !movement(x, y);
    }

    rule +!movement(int x, int y) : locationInfo(int botx, int boty) & y > boty & x == botx {
        !moveForward("south");
        !movement(x, y);
    }

    rule +!movement(int x, int y) : locationInfo(int botx, int boty) & y < boty & x == botx {
        !moveForward("north");
        !movement(x, y);
    }

    rule +!movement(int x, int y) {
        C.println("Predicates are bunched");
        ei.move("west", 0);
        S.sleep(2000);
        !movement(x, y);
    }

    rule +!moveForward(string direction){
        S.sleep(500);
        ei.move(direction, 0);
        ei.clean();
        !goForward(direction);
    }

    rule +!goForward(string direction) {
        !seekDust();
        foreach(squareInfo("forward", string z)){
            if(z == "empty" | z == "dust"){
                ei.move("forward", 1);
            } else{
                !obstacleAvoid(direction);
            }
        }
    }

    rule +!seekDust(){
        string check = "true";
        while(check == "true"){
            S.sleep(1000);
            check = "false";

            foreach(squareInfo("left", string l)){
                if(l == "dust"){
                    ei.move("left", 1);
                    ei.clean();
                    check="true";
                }
            }

            foreach(squareInfo("right", string r)){
                if(r == "dust"){
                     ei.move("right", 1);
                     ei.clean();
                     check="true";
                }
            }

            foreach(squareInfo("forward", string f)){
               if(f == "dust"){
                    ei.move("forward", 1);
                    ei.clean();
                    check="true";
               }
            }

            foreach(squareInfo("forwardLeft", string fl)){
               foreach(squareInfo("left", string l)){
                  foreach(squareInfo("forward", string f)){
                     if(fl == "dust" & f == "empty"){
                           ei.move("forward", 1);
                           ei.move("left", 1);
                           ei.clean();
                           check="true";
                     } else if(l == "empty" & fl == "dust"){
                          ei.move("left", 1);
                          ei.move("forward", 1);
                          ei.clean();
                          check="true";
                     }
                  }
               }
            }

            foreach(squareInfo("forwardRight", string fr)){
               foreach(squareInfo("right", string r)){
                  foreach(squareInfo("forward", string f)){
                     if(fr == "dust" & f == "empty"){
                           ei.move("forward", 1);
                           ei.move("right", 1);
                           ei.clean();
                           check="true";
                     } else if(r == "empty" & fr == "dust"){
                           ei.move("right", 1);
                           ei.move("forward", 1);
                           ei.clean();
                           check="true";
                     }
                  }
               }
            }
        }
    }

    rule +!obstacleAvoid(string direction) : squareInfo("left", string l) & squareInfo("right", string r){
        if(direction == "east"){
            if(r == "dust" | r == "empty"){
                        ei.move("right", 1);
                } else if(l == "dust" | l == "empty"){
                   ei.move("left", 1);
                } else {
                   ei.move("back", 1);
                   ei.move("right", 1);
            }
        } else{
            if(l == "dust" | l == "empty"){
                ei.move("left", 1);
            } else if(r == "dust" | r == "empty"){
                ei.move("right", 1);
            } else {
                ei.move("back", 1);
                ei.move("left", 1);
            }
        }

    }

    rule +!obstacleAvoid(string direction){
        C.println("Can't work out concept");
        !obstacleAvoid(direction);
    }

    rule +!cleanTile(){
        foreach(squareInfo("here", string h)){
            if(h == "dust"){
                ei.clean();
            }
        }

    }

    rule +$ei.event(square("here", string h)) : squareInfo("here", string oh){
        -squareInfo("here", oh);
        +squareInfo("here", h);
    }

    rule +$ei.event(square("here", string h)) {
        +squareInfo("here", h);
    }

    rule +$ei.event(square("forward", string f)) : squareInfo("forward", string of){
         -squareInfo("forward", of);
         +squareInfo("forward", f);
    }

    rule +$ei.event(square("forward", string f)) {
         +squareInfo("forward", f);
    }

    rule +$ei.event(square("left", string l)) : squareInfo("left", string ol) {
        -squareInfo("left", ol);
        +squareInfo("left", l);
    }

    rule +$ei.event(square("left", string l))  {
        +squareInfo("left", l);
    }

    rule +$ei.event(square("right", string r)) : squareInfo("right", string or) {
        -squareInfo("right", or);
        +squareInfo("right", r);
    }

    rule +$ei.event(square("right", string r)){
        +squareInfo("right", r);
    }

    rule +$ei.event(square("forwardLeft", string fl)) : squareInfo("forwardLeft", string ofl) {
        -squareInfo("forwardLeft", ofl);
        +squareInfo("forwardLeft", fl);
    }

    rule +$ei.event(square("forwardLeft", string fl)) {
        +squareInfo("forwardLeft", fl);
    }

    rule +$ei.event(square("forwardRight", string fr)) : squareInfo("forwardRight", string ofr){
        -squareInfo("forwardRight", ofr);
        +squareInfo("forwardRight", fr);
    }

    rule +$ei.event(square("forwardRight", string fr)) {
        +squareInfo("forwardRight", fr);
    }

    rule +$ei.event(location(int X, int Y)) : locationInfo(int Z, int W) {
        -locationInfo(Z, W);
        +locationInfo(X, Y);
        debug.dumpBeliefs();
    }

    rule +$ei.event(location(int X, int Y)) {
        +locationInfo(X, Y);
        debug.dumpBeliefs();
    }
}