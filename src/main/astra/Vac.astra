agent Vac extends VacOntology{
    rule +!main(list args) {
        ei.launch("vacuumworld","dependency/vacuumworld-1.2.0.jar");
        ei.join();

        int i = 0;
        string startLocation;

        ei.link(at_index(args, 0, string));
        startLocation = at_index(args, 1, string);
        S.sleep(2000);
        ei.move("west", 0);
        S.sleep(1000);
        if(startLocation == "topLeft"){
            !movement(0,1);
        }
        if(startLocation == "topRight"){
            !movement(15,3);
        }
        if(startLocation == "botLeft"){
            !movement(0,5);
        }
        if(startLocation == "botRight"){
            !movement(15,7);
        }
    }

    rule +!movement(int x, int y) : ei.location(int botx, int boty) & x == botx & y == boty {
        if(x > 10){
            x = 0;
        }else{
            x = 15;
        }
        !movement(x, y);
    }

    rule +!movement(int x, int y) : ei.location(int botx, int boty) & y > boty {
        if(x == botx){
            ei.move("south", 0);
            S.sleep(500);
            query(ei.square("forward", string f));
            if(f == "obstacle"){
                if(x > 10){
                    x = M.intValue("" + x) - 1;
                } else{
                    x = M.intValue("" + x) + 1;
                }
            }
        }
        !moveForward("south");
        !movement(x, y);
    }

    rule +!movement(int x, int y) : ei.location(int botx, int boty) & y < boty {
        if(x == botx){
            ei.move("north", 0);
            S.sleep(500);
            query(ei.square("forward", string f));
            if(f == "obstacle"){
                if(x > 10){
                    x = M.intValue("" + x) - 1;
                } else{
                    x = M.intValue("" + x) + 1;
                }
            }
        }
        !moveForward("north");
        !movement(x, y);
    }

    rule +!movement(int x, int y) : ei.location(int botx, int boty) & x > botx & y == boty {
        !moveForward("east");
        !movement(x, y);
    }

    rule +!movement(int x, int y) : ei.location(int botx, int boty) & x < botx & y == boty {
        !moveForward("west");
        !movement(x, y);
    }

    rule +!movement(int x, int y) {
        !movement(x, y);
    }

    rule +!moveForward(string direction){
        S.sleep(1000);
        ei.move(direction, 0);
        ei.clean();
        !goForward(direction);
    }

    rule +!goForward(string direction) {
        !seekDust();
        S.sleep(500);
        query(ei.square("forward", string f));
        if(f == "empty" | f == "dust"){
            ei.move("forward", 1);

            if(f == "dust"){
                ei.clean();
            }
        } else{
            !obstacleAvoid(direction);
        }
    }

    rule +!seekDust() : ei.square("left", string l) & ei.square("right", string r) & ei.square("forward", string f)
    & ei.square("forwardRight", string fr) & ei.square("forwardLeft", string fl){
        if(l == "dust"){
            ei.move("left", 1);
            ei.clean();
            ei.move("back", 1);
            ei.move("left", 0);
        }

        if(r == "dust"){
            ei.move("right", 1);
            ei.clean();
            ei.move("back", 1);
            ei.move("right", 0);
        }
        //if statement checking if forward is obstacle
        if(fl == "dust" & (f == "empty" | f == "dust")){
            ei.move("forward", 1);
            !cleanTile();
            ei.move("left", 1);
            ei.clean();
            ei.move("back", 1);
            ei.move("right", 1);
            ei.move("back", 0);
        } else if((l == "empty" |  l == "dust") & fl == "dust"){
            ei.move("left", 1);
            !cleanTile();
            ei.move("right", 1);
            ei.clean();
            ei.move("back", 1);
            ei.move("left", 1);
            ei.move("left", 0);
        }

        if(fr == "dust" & (f == "empty" | f == "dust")){
             ei.move("forward", 1);
             !cleanTile();
             ei.move("right", 1);
             ei.clean();
             ei.move("back", 1);
             ei.move("right", 0);
        } else if((r == "empty" | r == "dust") & fr == "dust"){
             ei.move("right", 1);
             !cleanTile();
             ei.move("left", 1);
             ei.clean();
             ei.move("back", 1);
             ei.move("right", 1);
             ei.move("right", 0);
        }

        if(f == "dust"){
            ei.move("forward", 1);
            ei.clean();
        }
    }

    rule +!seekDust(){
        !seekDust();
    }

    rule +!obstacleAvoid(string direction) : ei.square("left", string l) & ei.square("right", string r)
    & ei.square("forwardRight", string fr) & ei.square("forwardLeft", string fl){
        if(direction == "east" | direction == "south"){
            if(fl == "dust" | fl == "empty"){
                if(l == "dust" | l == "empty"){
                    ei.move("left", 1);
                    ei.move("right", 1);
                }
            } else if(fr == "dust" | fr == "empty"){
                if(r == "dust" | r == "empty"){
                    ei.move("right", 1);
                    ei.move("left", 1);
                }
            } else if(l == "dust" | l == "empty"){
                ei.move("left", 2);
                ei.move("right", 1);
            } else {
                ei.move("right", 2);
                ei.move("left", 1);
            }
            //Still might get stuck
        } else{
            if(fr == "dust" | fr == "empty"){
                if(r == "dust" | r == "empty"){
                    ei.move("right", 1);
                    ei.move("left", 1);
                }
            } else if(fl == "dust" | fl == "empty"){
               if(l == "dust" | l == "empty"){
                  ei.move("left", 1);
                  ei.move("right", 1);
              }
           }else if(r == "dust" | r == "empty"){
                ei.move("right", 2);
                ei.move("left", 1);
           } else {
                ei.move("left", 2);
                ei.move("right", 1);
           }
        }

    }

    rule +!obstacleAvoid(string direction){
        C.println("Can't work out concept");
        !obstacleAvoid(direction);
    }

    rule +!cleanTile(){
        S.sleep(500);
        query(ei.square("here", string h));
        if(h == "dust"){
            ei.clean();
        }
    }

}